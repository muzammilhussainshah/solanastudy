import React from 'react';
import './App.css';

const ClosingPriceTable = () => {
  // Complete 50 periods trading data
  const rawData = [
    [1753171200000, "198.10000000", "198.10000000", "194.05000000", "196.98000000", "336204.13800000", 1753174799999, "65873369.99030000", 218134, "151731.35200000", "29729952.44348000", "0"],
    [1753174800000, "196.97000000", "199.15000000", "194.42000000", "197.26000000", "373258.50700000", 1753178399999, "73500098.83246000", 211314, "144609.99300000", "28475629.86578000", "0"],
    [1753178400000, "197.27000000", "199.11000000", "197.14000000", "199.11000000", "164459.60600000", 1753181999999, "32605275.74700000", 116024, "78262.04700000", "15518274.49590000", "0"],
    [1753182000000, "199.10000000", "200.15000000", "197.63000000", "199.91000000", "173369.76100000", 1753185599999, "34515664.14986000", 128384, "87817.94200000", "17493548.34004000", "0"],
    [1753185600000, "199.91000000", "203.81000000", "199.07000000", "203.09000000", "384752.26500000", 1753189199999, "77529922.42390000", 188856, "211897.55500000", "42691319.23994000", "0"],
    [1753189200000, "203.09000000", "204.13000000", "198.19000000", "199.06000000", "649796.40200000", 1753192799999, "130617766.30322000", 350549, "295254.19400000", "59351340.51027000", "0"],
    [1753192800000, "199.07000000", "202.27000000", "196.95000000", "202.18000000", "366360.21800000", 1753196399999, "73102208.78438000", 263148, "193796.83000000", "38705096.22465000", "0"],
    [1753196400000, "202.18000000", "204.99000000", "201.21000000", "201.83000000", "515531.03000000", 1753199999999, "104897989.26307000", 285620, "283571.25800000", "57715920.28111000", "0"],
    [1753200000000, "201.82000000", "204.24000000", "200.76000000", "203.76000000", "285123.96200000", 1753203599999, "57866341.43727000", 192167, "159222.29100000", "32327265.72154000", "0"],
    [1753203600000, "203.76000000", "203.89000000", "200.78000000", "202.86000000", "242769.30200000", 1753207199999, "49088789.52276000", 236237, "109200.64700000", "22084009.73432000", "0"],
    [1753207200000, "202.85000000", "203.93000000", "201.16000000", "202.53000000", "274527.34000000", 1753210799999, "55579300.86118000", 206540, "142207.12100000", "28793873.39780000", "0"],
    [1753210800000, "202.52000000", "202.69000000", "198.39000000", "198.92000000", "218431.12300000", 1753214399999, "43799936.81776000", 174526, "93079.77600000", "18670680.59620000", "0"],
    [1753214400000, "198.91000000", "201.36000000", "198.39000000", "200.65000000", "128899.94100000", 1753217999999, "25796224.47588000", 93111, "75610.51000000", "15135012.63720000", "0"],
    [1753218000000, "200.64000000", "202.17000000", "199.83000000", "201.44000000", "123072.82000000", 1753221599999, "24740833.20922000", 64849, "69106.73600000", "13901126.13845000", "0"],
    [1753221600000, "201.44000000", "202.88000000", "201.43000000", "201.95000000", "91976.68500000", 1753225199999, "18596232.87275000", 74703, "38385.00200000", "7760974.50391000", "0"],
    [1753225200000, "201.95000000", "206.30000000", "201.93000000", "205.70000000", "328750.53600000", 1753228799999, "67253468.70901000", 132123, "201551.35500000", "41212562.62650000", "0"],
    [1753228800000, "205.70000000", "205.75000000", "203.36000000", "204.29000000", "202707.84000000", 1753232399999, "41471108.55152000", 117587, "94743.62300000", "19384813.77651000", "0"],
    [1753232400000, "204.30000000", "204.52000000", "202.64000000", "203.05000000", "168251.37300000", 1753235999999, "34244981.84917000", 94909, "64633.24800000", "13158337.43857000", "0"],
    [1753236000000, "203.05000000", "203.39000000", "201.61000000", "202.34000000", "144084.68100000", 1753239599999, "29179865.97443000", 107751, "56523.29700000", "11448833.63343000", "0"],
    [1753239600000, "202.34000000", "202.75000000", "200.99000000", "201.39000000", "126747.85100000", 1753243199999, "25583715.92934000", 76095, "56293.22100000", "11364180.42611000", "0"],
    [1753243200000, "201.40000000", "202.26000000", "201.00000000", "201.65000000", "100024.10500000", 1753246799999, "20168750.73154000", 68851, "49721.45800000", "10024899.36134000", "0"],
    [1753246800000, "201.65000000", "202.01000000", "200.83000000", "201.58000000", "97397.29600000", 1753250399999, "19610707.45318000", 73632, "42423.03500000", "8544459.89226000", "0"],
    [1753250400000, "201.58000000", "201.93000000", "199.74000000", "200.62000000", "126727.17000000", 1753253999999, "25426128.15151000", 103195, "44814.96500000", "8996205.36807000", "0"],
    [1753254000000, "200.61000000", "201.14000000", "198.88000000", "199.46000000", "122380.79400000", 1753257599999, "24461508.29748000", 99195, "38362.45200000", "7670819.21783000", "0"],
    [1753257600000, "199.47000000", "199.83000000", "198.71000000", "199.83000000", "105879.41600000", 1753261199999, "21094447.21107000", 77036, "51148.59400000", "10193281.43837000", "0"],
    [1753261200000, "199.83000000", "200.00000000", "197.51000000", "197.66000000", "148554.61400000", 1753264799999, "29466972.89698000", 95652, "49693.18500000", "9863470.16363000", "0"],
    [1753264800000, "197.66000000", "198.03000000", "195.86000000", "197.94000000", "215344.03900000", 1753268399999, "42405792.25824000", 120932, "95439.61300000", "18793292.88074000", "0"],
    [1753268400000, "197.94000000", "198.20000000", "196.92000000", "197.42000000", "103324.65100000", 1753271999999, "20411017.51031000", 78500, "42884.83600000", "8473113.22614000", "0"],
    [1753272000000, "197.41000000", "197.57000000", "193.68000000", "194.17000000", "285969.85500000", 1753275599999, "55896081.22049000", 164203, "98869.04900000", "19336412.45698000", "0"],
    [1753275600000, "194.16000000", "194.89000000", "187.61000000", "189.18000000", "987778.67300000", 1753279199999, "188467396.55324000", 456413, "431249.80300000", "82284358.78778000", "0"],
    [1753279200000, "189.18000000", "192.36000000", "188.69000000", "191.61000000", "437372.71200000", 1753282799999, "83502967.64103000", 261584, "202677.24900000", "38708784.89470000", "0"],
    [1753282800000, "191.60000000", "192.79000000", "189.65000000", "192.72000000", "213460.55000000", 1753286399999, "40783891.09624000", 179037, "102049.61100000", "19507025.70383000", "0"],
    [1753286400000, "192.72000000", "192.75000000", "188.02000000", "188.26000000", "338307.80500000", 1753289999999, "64359144.45608000", 209321, "122482.70300000", "23312942.59359000", "0"],
    [1753290000000, "188.26000000", "189.29000000", "186.01000000", "188.70000000", "377908.40300000", 1753293599999, "70883897.74975000", 261740, "170373.65300000", "31961513.19904000", "0"],
    [1753293600000, "188.70000000", "190.30000000", "188.19000000", "190.22000000", "163213.11900000", 1753297199999, "30907930.89117000", 134772, "85642.48800000", "16220840.76568000", "0"],
    [1753297200000, "190.21000000", "190.26000000", "188.03000000", "188.08000000", "137707.41300000", 1753300799999, "26040777.31333000", 110322, "73409.73200000", "13882258.57418000", "0"],
    [1753300800000, "188.09000000", "189.76000000", "184.44000000", "186.78000000", "417397.71300000", 1753304399999, "77827767.48674000", 272084, "192415.23900000", "35883532.66687000", "0"],
    [1753304400000, "186.78000000", "188.25000000", "183.97000000", "187.94000000", "307110.09100000", 1753307999999, "57151604.30092000", 184242, "143782.66900000", "26771476.31173000", "0"],
    [1753308000000, "187.94000000", "189.69000000", "186.49000000", "189.08000000", "148209.00400000", 1753311599999, "27934503.89969000", 105034, "89333.38000000", "16841526.65711000", "0"],
    [1753311600000, "189.07000000", "190.04000000", "188.87000000", "189.40000000", "72278.33100000", 1753315199999, "13701249.03795000", 59763, "38764.63800000", "7348978.91239000", "0"],
    [1753315200000, "189.40000000", "190.99000000", "188.48000000", "190.95000000", "187946.05600000", 1753318799999, "35750814.37188000", 104120, "98246.20400000", "18703610.39265000", "0"],
    [1753318800000, "190.95000000", "191.57000000", "189.25000000", "191.54000000", "116302.87200000", 1753322399999, "22146269.97983000", 79419, "61363.29300000", "11691130.74467000", "0"],
    [1753322400000, "191.53000000", "191.65000000", "190.38000000", "191.14000000", "104270.42200000", 1753325999999, "19918064.90980000", 72407, "52333.67800000", "9994889.49179000", "0"],
    [1753326000000, "191.14000000", "191.87000000", "189.62000000", "189.85000000", "96837.29900000", 1753329599999, "18491408.47334000", 76337, "41811.90200000", "7990086.96019000", "0"],
    [1753329600000, "189.85000000", "190.12000000", "185.33000000", "186.05000000", "179080.88300000", 1753333199999, "33588463.07771000", 138673, "70381.71400000", "13207621.28540000", "0"],
    [1753333200000, "186.04000000", "186.20000000", "181.29000000", "181.87000000", "443165.72100000", 1753336799999, "81515056.51642000", 241797, "176668.34600000", "32501398.17466000", "0"],
    [1753336800000, "181.88000000", "184.12000000", "179.87000000", "181.08000000", "362611.62300000", 1753340399999, "65981913.03977000", 255784, "147280.98500000", "26838809.19070000", "0"],
    [1753340400000, "181.08000000", "184.33000000", "179.21000000", "184.21000000", "287752.65300000", 1753343999999, "52389563.81318000", 204347, "159650.92100000", "29095381.88220000", "0"],
    [1753344000000, "184.20000000", "186.36000000", "183.27000000", "186.04000000", "244410.00000000", 1753347599999, "45314771.00285000", 148762, "146166.61300000", "27099996.92206000", "0"],
    [1753347600000, "186.03000000", "186.46000000", "184.44000000", "185.34000000", "147338.55600000", 1753351199999, "27345236.43816000", 106514, "66361.99500000", "12321128.63510000", "0"]
  ];

  // Process data to show closing price with time
  const processedData = rawData.map((row, index) => {
    const timestamp = row[0];
    const closingPrice = parseFloat(row[4]);
    const volume = parseFloat(row[5]);
    
    // Convert timestamp to readable time
    const date = new Date(timestamp);
    const timeString = date.toLocaleString('en-US', {
      month: '2-digit',
      day: '2-digit', 
      hour: '2-digit',
      minute: '2-digit',
      hour12: false
    });

    return {
      period: index + 1,
      time: timeString,
      closingPrice: closingPrice.toFixed(2),
      volume: volume.toLocaleString(),
      change: index > 0 ? (closingPrice - parseFloat(rawData[index-1][4])).toFixed(2) : '0.00'
    };
  });

  // Calculate summary stats
  const prices = processedData.map(d => parseFloat(d.closingPrice));
  const highestPrice = Math.max(...prices);
  const lowestPrice = Math.min(...prices);
  const firstPrice = prices[0];
  const lastPrice = prices[prices.length - 1];
  const totalChange = (lastPrice - firstPrice).toFixed(2);
  const changePercent = ((lastPrice - firstPrice) / firstPrice * 100).toFixed(2);

  return (
    <div className="trading-container">
      <h2 className="trading-title">Complete 50 Periods Trading Data</h2>
      
      {/* Summary Cards */}
      <div className="summary-grid">
        <div className="summary-card summary-card-blue">
          <p className="summary-label">Current Price</p>
          <p className="summary-value summary-value-blue">${lastPrice}</p>
        </div>
        <div className="summary-card summary-card-green">
          <p className="summary-label">24h High</p>
          <p className="summary-value summary-value-green">${highestPrice.toFixed(2)}</p>
        </div>
        <div className="summary-card summary-card-red">
          <p className="summary-label">24h Low</p>
          <p className="summary-value summary-value-red">${lowestPrice.toFixed(2)}</p>
        </div>
        <div className={`summary-card ${totalChange >= 0 ? 'summary-card-green' : 'summary-card-red'}`}>
          <p className="summary-label">24h Change</p>
          <p className={`summary-value ${totalChange >= 0 ? 'summary-value-green' : 'summary-value-red'}`}>
            ${totalChange} ({changePercent}%)
          </p>
        </div>
      </div>

      {/* Data Table */}
      <div className="data-table-container">
        <table className="data-table">
          <thead className="table-header">
            <tr>
              <th className="table-header-cell">Period</th>
              <th className="table-header-cell">Time</th>
              <th className="table-header-cell table-header-cell-right">Closing Price</th>
              <th className="table-header-cell table-header-cell-right">Change</th>
              <th className="table-header-cell table-header-cell-right">Volume</th>
            </tr>
          </thead>
          <tbody className="table-body">
            {processedData.map((row, index) => (
              <tr key={index} className="table-row">
                <td className="table-cell">{row.period}</td>
                <td className="table-cell table-cell-mono">{row.time}</td>
                <td className="table-cell table-cell-right table-cell-bold">${row.closingPrice}</td>
                <td className={`table-cell table-cell-right ${
                  parseFloat(row.change) >= 0 ? 'table-cell-green' : 'table-cell-red'
                }`}>
                  {parseFloat(row.change) >= 0 ? '+' : ''}${row.change}
                </td>
                <td className="table-cell table-cell-right table-cell-gray">{row.volume}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      <div className="footer-text">
        Total periods: {processedData.length} | Complete dataset with all 50 periods | Ready for 500+ periods
      </div>
    </div>
  );
};

export default ClosingPriceTable;